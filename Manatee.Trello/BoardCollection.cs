using System;
using System.Threading;
using System.Threading.Tasks;
using Manatee.Trello.Internal.DataAccess;
using Manatee.Trello.Internal.Validation;
using Manatee.Trello.Json;

namespace Manatee.Trello
{
	/// <summary>
	/// A collection of boards.
	/// </summary>
	public class BoardCollection : ReadOnlyBoardCollection, IBoardCollection
	{
		private readonly EntityRequestType _addRequestType;

		internal BoardCollection(Type type, Func<string> getOwnerId, TrelloAuthorization auth)
			: base(type, getOwnerId, auth)
		{
			_addRequestType = type == typeof (Organization)
				                  ? EntityRequestType.Organization_Write_CreateBoard
				                  : EntityRequestType.Member_Write_CreateBoard;
		}

		/// <summary>
		/// Creates a new board.
		/// </summary>
		/// <param name="name">The name of the board to create.</param>
		/// <param name="source">(Optional) A board to use as a template.</param>
		/// <returns>The <see cref="Board"/> generated by Trello.</returns>
		public async Task<IBoard> Add(string name, IBoard source = null, CancellationToken ct = default(CancellationToken))
		{
			var error = NotNullOrWhiteSpaceRule.Instance.Validate(null, name);
			if (error != null)
				throw new ValidationException<string>(name, new[] {error});

			var json = TrelloConfiguration.JsonFactory.Create<IJsonBoard>();
			json.Name = name;
			if (source != null)
				json.BoardSource = ((Board) source).Json;
			if (_addRequestType == EntityRequestType.Organization_Write_CreateBoard)
			{
				json.Organization = TrelloConfiguration.JsonFactory.Create<IJsonOrganization>();
				json.Organization.Id = OwnerId;
			}

			var endpoint = EndpointFactory.Build(_addRequestType);
			var newData = await JsonRepository.Execute(Auth, endpoint, json, ct);

			return new Board(newData, Auth);
		}
	}
}